{"version":3,"file":"SignIn-vtCOKr6T.js","sources":["../../src/components/SignInForm/SignInForm.jsx","../../src/pages/SignIn/SignIn.jsx"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport Logo from '../Logo/Logo';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from '../../redux/users/operations';\nimport { useState } from 'react';\nimport sprite from '../../assets/images/svg/symbol-defs.svg';\nimport css from './SignInForm.module.css';\nimport { useTranslation } from 'react-i18next';\n\nconst schema = yup.object().shape({\n  email: yup\n    .string()\n    .email('Please enter valid email')\n    .required('Email field is required'),\n  password: yup\n    .string()\n    .required('Password field is required')\n    .min(6, 'Password must contain at least 6 characters'),\n});\n\nconst SignInForm = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const [showPassword, setShowPassword] = useState(false);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n    clearErrors,\n  } = useForm({\n    resolver: yupResolver(schema),\n    mode: 'onBlur',\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n  });\n\n  const handleFocus = fieldName => clearErrors(fieldName);\n\n  const onSubmit = data => {\n    dispatch(logIn(data));\n    reset();\n  };\n\n  return (\n    <div className={css.loginContainer}>\n      {<Logo />}\n      <div className={css.formContainer}>\n        <h1 className={css.title}>{t('signinForm.signin')}</h1>\n        <form className={css.form} onSubmit={handleSubmit(onSubmit)}>\n          <label className={css.label}>{t('signinForm.email')}</label>\n          <div className={css.input_field}>\n            <input\n              className={`${css.input} ${errors.email ? css.error : ''}`}\n              type=\"email\"\n              {...register('email', {\n                pattern: {\n                  value: /[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/,\n                  message: 'Please enter valid email',\n                },\n              })}\n              placeholder={t('signinForm.placeholderEmail')}\n              autoComplete=\"on\"\n              onFocus={() => handleFocus('email')}\n            />\n            {errors.email && (\n              <span className={css.errors}>{errors.email.message}</span>\n            )}\n          </div>\n          <label className={css.label}>{t('signinForm.password')}</label>\n          <div className={css.input_field}>\n            <input\n              className={`${css.input} ${errors.password ? css.error : ''}`}\n              type={showPassword ? 'text' : 'password'}\n              {...register('password')}\n              placeholder={t('signinForm.placeholderPassword')}\n              onFocus={() => handleFocus('password')}\n            />\n            {errors.password && (\n              <span className={css.errors}>{errors.password.message}</span>\n            )}\n            {!showPassword && (\n              <svg\n                className={css.icon_eye}\n                onClick={() => setShowPassword(!showPassword)}\n              >\n                <use\n                  width={20}\n                  height={20}\n                  xlinkHref={`${sprite}#eye-off`}\n                ></use>\n              </svg>\n            )}\n\n            {showPassword && (\n              <svg\n                className={css.eyeIconOff}\n                onClick={() => setShowPassword(!showPassword)}\n              >\n                <use width={20} height={20} xlinkHref={`${sprite}#eye`}></use>\n              </svg>\n            )}\n          </div>\n\n          <button className={css.button} type=\"submit\">\n            {t('signinForm.signin')}\n          </button>\n        </form>\n        <p className={css.description}>\n          {t('signinForm.dontAccount')}?&nbsp;\n          <NavLink className={css.link} to={'/signup'}>\n            {t('signinForm.signup')}\n          </NavLink>\n        </p>\n      </div>\n    </div>\n  );\n};\nexport default SignInForm;\n","import { Helmet } from 'react-helmet-async';\n// import Logo from '../../components/Logo/Logo';\nimport SignInForm from '../../components/SignInForm/SignInForm';\nimport AdvantagesSection from '../../components/AdvantagesSection/AdvantagesSection';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoading } from '../../redux/users/selectors';\nimport Loader from '../../components/Loader/Loader';\nimport css from '../SignIn/SignInPage.module.css';\nimport { useTranslation } from 'react-i18next';\n\nconst SignIn = () => {\n  const loading = useSelector(selectIsLoading);\n  const { t } = useTranslation();\n  return (\n    <>\n      {loading && <Loader />}\n      <Helmet>\n        <title>{t('pages.signin')}</title>\n      </Helmet>\n      <div className={css.generalSignInForm}>\n        <SignInForm />\n        <div className={css.AdvantagesSection_plus}>\n          <AdvantagesSection />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default SignIn;\n"],"names":["schema","yup.object","yup.string","SignInForm","t","useTranslation","dispatch","useDispatch","showPassword","setShowPassword","useState","register","handleSubmit","errors","reset","clearErrors","useForm","yupResolver","handleFocus","fieldName","onSubmit","data","logIn","jsxs","css","jsx","Logo","sprite","NavLink","SignIn","loading","useSelector","selectIsLoading","Fragment","Loader","Helmet","AdvantagesSection"],"mappings":"8tBAYMA,EAASC,EAAW,EAAE,MAAM,CAChC,MAAOC,EACG,EACP,MAAM,0BAA0B,EAChC,SAAS,yBAAyB,EACrC,SAAUA,EACA,EACP,SAAS,4BAA4B,EACrC,IAAI,EAAG,6CAA6C,CACzD,CAAC,EAEKC,EAAa,IAAM,CACjB,KAAA,CAAE,EAAAC,GAAMC,IACRC,EAAWC,IACX,CAACC,EAAcC,CAAe,EAAIC,WAAS,EAAK,EAEhD,CACJ,SAAAC,EACA,aAAAC,EACA,UAAW,CAAE,OAAAC,CAAO,EACpB,MAAAC,EACA,YAAAC,GACEC,EAAQ,CACV,SAAUC,EAAYjB,CAAM,EAC5B,KAAM,SACN,cAAe,CACb,MAAO,GACP,SAAU,EACZ,CAAA,CACD,EAEKkB,EAA2BC,GAAAJ,EAAYI,CAAS,EAEhDC,EAAmBC,GAAA,CACdf,EAAAgB,EAAMD,CAAI,CAAC,EACdP,GAAA,EAGR,OACGS,EAAAA,KAAA,MAAA,CAAI,UAAWC,EAAI,eACjB,SAAA,CAAAC,EAAA,IAACC,EAAK,EAAA,EACNH,EAAA,KAAA,MAAA,CAAI,UAAWC,EAAI,cAClB,SAAA,CAAAC,MAAC,MAAG,UAAWD,EAAI,MAAQ,SAAApB,EAAE,mBAAmB,EAAE,EAClDmB,OAAC,QAAK,UAAWC,EAAI,KAAM,SAAUZ,EAAaQ,CAAQ,EACxD,SAAA,CAAAK,MAAC,SAAM,UAAWD,EAAI,MAAQ,SAAApB,EAAE,kBAAkB,EAAE,EACnDmB,EAAA,KAAA,MAAA,CAAI,UAAWC,EAAI,YAClB,SAAA,CAAAC,EAAA,IAAC,QAAA,CACC,UAAW,GAAGD,EAAI,KAAK,IAAIX,EAAO,MAAQW,EAAI,MAAQ,EAAE,GACxD,KAAK,QACJ,GAAGb,EAAS,QAAS,CACpB,QAAS,CACP,MAAO,0CACP,QAAS,0BACX,CAAA,CACD,EACD,YAAaP,EAAE,6BAA6B,EAC5C,aAAa,KACb,QAAS,IAAMc,EAAY,OAAO,CAAA,CACpC,EACCL,EAAO,OACLY,MAAA,OAAA,CAAK,UAAWD,EAAI,OAAS,SAAOX,EAAA,MAAM,OAAQ,CAAA,CAAA,EAEvD,QACC,QAAM,CAAA,UAAWW,EAAI,MAAQ,SAAApB,EAAE,qBAAqB,EAAE,EACtDmB,EAAA,KAAA,MAAA,CAAI,UAAWC,EAAI,YAClB,SAAA,CAAAC,EAAA,IAAC,QAAA,CACC,UAAW,GAAGD,EAAI,KAAK,IAAIX,EAAO,SAAWW,EAAI,MAAQ,EAAE,GAC3D,KAAMhB,EAAe,OAAS,WAC7B,GAAGG,EAAS,UAAU,EACvB,YAAaP,EAAE,gCAAgC,EAC/C,QAAS,IAAMc,EAAY,UAAU,CAAA,CACvC,EACCL,EAAO,UACLY,MAAA,OAAA,CAAK,UAAWD,EAAI,OAAS,SAAOX,EAAA,SAAS,OAAQ,CAAA,EAEvD,CAACL,GACAiB,EAAA,IAAC,MAAA,CACC,UAAWD,EAAI,SACf,QAAS,IAAMf,EAAgB,CAACD,CAAY,EAE5C,SAAAiB,EAAA,IAAC,MAAA,CACC,MAAO,GACP,OAAQ,GACR,UAAW,GAAGE,CAAM,UAAA,CACrB,CAAA,CACH,EAGDnB,GACCiB,EAAA,IAAC,MAAA,CACC,UAAWD,EAAI,WACf,QAAS,IAAMf,EAAgB,CAACD,CAAY,EAE5C,SAAAiB,EAAAA,IAAC,OAAI,MAAO,GAAI,OAAQ,GAAI,UAAW,GAAGE,CAAM,MAAQ,CAAA,CAAA,CAC1D,CAAA,EAEJ,EAEAF,EAAAA,IAAC,UAAO,UAAWD,EAAI,OAAQ,KAAK,SACjC,SAAEpB,EAAA,mBAAmB,CACxB,CAAA,CAAA,EACF,EACCmB,EAAA,KAAA,IAAA,CAAE,UAAWC,EAAI,YACf,SAAA,CAAApB,EAAE,wBAAwB,EAAE,KAC7BqB,EAAAA,IAACG,GAAQ,UAAWJ,EAAI,KAAM,GAAI,UAC/B,SAAEpB,EAAA,mBAAmB,CACxB,CAAA,CAAA,EACF,CAAA,EACF,CACF,CAAA,CAAA,CAEJ,uHCjHMyB,EAAS,IAAM,CACb,MAAAC,EAAUC,EAAYC,CAAe,EACrC,CAAE,EAAA5B,GAAMC,IACd,OAEKkB,EAAA,KAAAU,WAAA,CAAA,SAAA,CAAAH,SAAYI,EAAO,EAAA,QACnBC,EACC,CAAA,SAAAV,MAAC,SAAO,SAAErB,EAAA,cAAc,EAAE,CAC5B,CAAA,EACCmB,EAAA,KAAA,MAAA,CAAI,UAAWC,EAAI,kBAClB,SAAA,CAAAC,EAAA,IAACtB,EAAW,EAAA,QACX,MAAI,CAAA,UAAWqB,EAAI,uBAClB,SAAAC,MAACW,GAAkB,CAAA,EACrB,CAAA,EACF,CACF,CAAA,CAAA,CAEJ"}